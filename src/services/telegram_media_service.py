"""
Servi√ßo para gerenciar m√≠dia via API do Telegram
Envia arquivos para grupo de notifica√ß√µes e retorna file_id para armazenamento
"""

import os
import asyncio
import tempfile
import logging
from datetime import datetime
from typing import Optional, Dict, Any
from telegram import Bot
from telegram.error import TelegramError

logger = logging.getLogger(__name__)

class TelegramMediaService:
    """Servi√ßo para gerenciar upload e armazenamento de m√≠dia via Telegram"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.bot = Bot(token=bot_token)
    
    async def upload_media_to_telegram(self, 
                                     file_path: str, 
                                     log_group_id: str, 
                                     bot_id: int,
                                     media_type: str = "photo") -> Optional[str]:
        """
        Envia m√≠dia para o grupo de logs do Telegram e retorna o file_id
        
        Args:
            file_path: Caminho do arquivo local
            log_group_id: ID do grupo onde armazenar a m√≠dia
            bot_id: ID do bot (para identifica√ß√£o)
            media_type: Tipo da m√≠dia (photo, audio, video)
            
        Returns:
            file_id do Telegram ou None se falhar
        """
        try:
            if not log_group_id:
                logger.error("‚ùå ID do grupo de logs n√£o configurado")
                return None
            
            # Verifica se o arquivo existe
            if not os.path.exists(file_path):
                logger.error(f"‚ùå Arquivo n√£o encontrado: {file_path}")
                return None
            
            # Mensagem identificadora
            caption = f"üìÅ Bot ID: {bot_id} | M√≠dia: {media_type} | Upload: {datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S')}"
            
            logger.info(f"üì§ Enviando {media_type} para grupo {log_group_id}")
            
            with open(file_path, 'rb') as media_file:
                if media_type == "photo":
                    message = await self.bot.send_photo(
                        chat_id=log_group_id,
                        photo=media_file,
                        caption=caption
                    )
                    file_id = message.photo[-1].file_id  # Pega a maior resolu√ß√£o
                    
                elif media_type == "audio":
                    message = await self.bot.send_audio(
                        chat_id=log_group_id,
                        audio=media_file,
                        caption=caption
                    )
                    file_id = message.audio.file_id
                    
                elif media_type == "video":
                    message = await self.bot.send_video(
                        chat_id=log_group_id,
                        video=media_file,
                        caption=caption
                    )
                    file_id = message.video.file_id
                    
                else:
                    logger.error(f"‚ùå Tipo de m√≠dia n√£o suportado: {media_type}")
                    return None
            
            logger.info(f"‚úÖ M√≠dia enviada com sucesso! File ID: {file_id}")
            return file_id
            
        except TelegramError as e:
            logger.error(f"‚ùå Erro do Telegram ao enviar {media_type}: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Erro geral ao enviar {media_type}: {e}")
            return None
    
    async def send_media_by_file_id(self, 
                                  chat_id: str, 
                                  file_id: str, 
                                  media_type: str = "photo",
                                  caption: str = None) -> bool:
        """
        Envia m√≠dia usando file_id do Telegram
        
        Args:
            chat_id: ID do chat de destino
            file_id: File ID da m√≠dia no Telegram
            media_type: Tipo da m√≠dia
            caption: Legenda opcional
            
        Returns:
            True se enviou com sucesso, False caso contr√°rio
        """
        try:
            if media_type == "photo":
                await self.bot.send_photo(
                    chat_id=chat_id,
                    photo=file_id,
                    caption=caption
                )
            elif media_type == "audio":
                await self.bot.send_audio(
                    chat_id=chat_id,
                    audio=file_id,
                    caption=caption
                )
            elif media_type == "video":
                await self.bot.send_video(
                    chat_id=chat_id,
                    video=file_id,
                    caption=caption
                )
            else:
                logger.error(f"‚ùå Tipo de m√≠dia n√£o suportado: {media_type}")
                return False
                
            logger.info(f"‚úÖ M√≠dia {media_type} enviada via file_id")
            return True
            
        except TelegramError as e:
            logger.error(f"‚ùå Erro do Telegram ao enviar m√≠dia via file_id: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro geral ao enviar m√≠dia via file_id: {e}")
            return False
    
    def validate_media_file(self, file) -> Dict[str, Any]:
        """Valida arquivo de m√≠dia"""
        if not file or not file.filename:
            return {'valid': False, 'error': 'Nenhum arquivo fornecido'}
        
        filename = file.filename.lower()
        
        # Valida√ß√£o espec√≠fica para OGG
        if filename.endswith('.ogg') or filename.endswith('.opus'):
            from ..api.routes.bots import validate_ogg_audio_file
            return validate_ogg_audio_file(file)
        
        # Valida√ß√µes para outros tipos
        if filename.endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
            return {'valid': True, 'media_type': 'photo'}
        elif filename.endswith(('.mp4', '.avi', '.mov', '.mkv', '.webm')):
            return {'valid': True, 'media_type': 'video'}
        elif filename.endswith(('.mp3', '.wav', '.m4a')):
            return {'valid': True, 'media_type': 'audio'}
        else:
            return {'valid': False, 'error': 'Formato de arquivo n√£o suportado'}
    
    def create_temp_file(self, file, prefix: str = "temp_") -> str:
        """Cria arquivo tempor√°rio para upload"""
        # Reset file pointer
        file.seek(0)
        
        # Extrai extens√£o do arquivo original
        _, ext = os.path.splitext(file.filename)
        
        # Cria arquivo tempor√°rio
        temp_fd, temp_path = tempfile.mkstemp(suffix=ext, prefix=prefix)
        
        try:
            # Escreve o conte√∫do do arquivo no arquivo tempor√°rio
            with os.fdopen(temp_fd, 'wb') as temp_file:
                file.seek(0)  # Garante que est√° no in√≠cio
                temp_file.write(file.read())
            
            logger.info(f"üìÇ Arquivo tempor√°rio criado: {temp_path}")
            return temp_path
            
        except Exception as e:
            # Se houve erro, limpa o arquivo tempor√°rio
            try:
                os.close(temp_fd)
                os.unlink(temp_path)
            except:
                pass
            raise e
    
    def cleanup_temp_file(self, temp_path: str):
        """Remove arquivo tempor√°rio"""
        try:
            if os.path.exists(temp_path):
                os.unlink(temp_path)
                logger.info(f"üóëÔ∏è Arquivo tempor√°rio removido: {temp_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao remover arquivo tempor√°rio {temp_path}: {e}")

async def upload_media_to_telegram(bot_token: str, file_path: str, chat_id: str, media_type: str) -> Optional[str]:
    """Upload de m√≠dia para o Telegram com retry e melhor tratamento de erros"""
    bot = Bot(token=bot_token)
    max_retries = 3
    
    for attempt in range(max_retries):
        try:
            logger.info(f"üöÄ Tentativa {attempt + 1}/{max_retries} de upload para {chat_id}")
            logger.info(f"üìÅ Arquivo: {file_path}")
            logger.info(f"üè∑Ô∏è Tipo: {media_type}")
            
            # Verifica se arquivo existe
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"Arquivo n√£o encontrado: {file_path}")
            
            # Verifica tamanho do arquivo
            file_size = os.path.getsize(file_path)
            logger.info(f"üìä Tamanho do arquivo: {file_size / 1024 / 1024:.2f}MB")
            
            with open(file_path, 'rb') as media_file:
                if media_type == 'photo':
                    message = await bot.send_photo(
                        chat_id=chat_id,
                        photo=media_file,
                        read_timeout=60,
                        write_timeout=60,
                        connect_timeout=30
                    )
                    file_id = message.photo[-1].file_id  # Pega a maior resolu√ß√£o
                    
                elif media_type == 'video':
                    # Verificar tamanho para v√≠deos (50MB limite do Telegram)
                    max_video_size = 50 * 1024 * 1024  # 50MB
                    if file_size > max_video_size:
                        logger.error(f"‚ùå V√≠deo muito grande: {file_size/1024/1024:.1f}MB (m√°x: 50MB)")
                        raise ValueError(f"V√≠deo muito grande: {file_size/1024/1024:.1f}MB")
                    
                    message = await bot.send_video(
                        chat_id=chat_id,
                        video=media_file,
                        supports_streaming=True,  # Melhor para v√≠deos grandes
                        read_timeout=180,  # 3 minutos para v√≠deos
                        write_timeout=180,
                        connect_timeout=30
                    )
                    file_id = message.video.file_id
                    
                elif media_type == 'voice' or (media_type == 'audio' and file_path.endswith('.ogg')):
                    # Para arquivos OGG, sempre usar como voice message
                    message = await bot.send_voice(
                        chat_id=chat_id,
                        voice=media_file,
                        read_timeout=60,
                        write_timeout=60,
                        connect_timeout=30
                    )
                    file_id = message.voice.file_id
                    
                elif media_type == 'audio':
                    message = await bot.send_audio(
                        chat_id=chat_id,
                        audio=media_file,
                        read_timeout=60,
                        write_timeout=60,
                        connect_timeout=30
                    )
                    file_id = message.audio.file_id
                    
                else:
                    raise ValueError(f"Tipo de m√≠dia n√£o suportado: {media_type}")
            
            logger.info(f"‚úÖ Upload bem-sucedido! File ID: {file_id}")
            return file_id
            
        except Exception as e:
            logger.error(f"‚ùå Tentativa {attempt + 1} falhou: {e}")
            
            # Log espec√≠fico para diferentes tipos de erro
            if "File too large" in str(e) or "Request Entity Too Large" in str(e):
                logger.error(f"‚ùå ERRO: Arquivo muito grande para o Telegram")
                return None  # N√£o retry para arquivos muito grandes
            elif "Bad Request" in str(e) and "invalid file" in str(e).lower():
                logger.error(f"‚ùå ERRO: Arquivo corrompido ou formato inv√°lido")
                return None  # N√£o retry para arquivos inv√°lidos
            elif attempt < max_retries - 1:
                # Espera antes da pr√≥xima tentativa
                wait_time = (attempt + 1) * 5  # 5, 10, 15 segundos
                logger.info(f"‚è≥ Aguardando {wait_time}s antes da pr√≥xima tentativa...")
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"‚ùå Todas as tentativas de upload falharam")
                return None

def run_async_media_upload(bot_token: str, file_path: str, chat_id: str, bot_id: int, media_type: str) -> Optional[str]:
    """Wrapper s√≠ncrono para upload ass√≠ncrono de m√≠dia"""
    try:
        # Cria novo loop se necess√°rio
        try:
            loop = asyncio.get_event_loop()
            if loop.is_closed():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        # Executa upload
        return loop.run_until_complete(
            upload_media_to_telegram(bot_token, file_path, chat_id, media_type)
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro no wrapper ass√≠ncrono: {e}")
        return None