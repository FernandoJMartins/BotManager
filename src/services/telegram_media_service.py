"""
Servi√ßo para gerenciar m√≠dia via API do Telegram
Envia arquivos para grupo de notifica√ß√µes e retorna file_id para armazenamento
"""

import os
import asyncio
import tempfile
from datetime import datetime
from typing import Optional, Dict, Any
from telegram import Bot
from telegram.error import TelegramError
from ..utils.logger import logger

class TelegramMediaService:
    """Servi√ßo para gerenciar upload e armazenamento de m√≠dia via Telegram"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.bot = Bot(token=bot_token)
    
    async def upload_media_to_telegram(self, 
                                     file_path: str, 
                                     log_group_id: str, 
                                     bot_id: int,
                                     media_type: str = "photo") -> Optional[str]:
        """
        Envia m√≠dia para o grupo de logs do Telegram e retorna o file_id
        
        Args:
            file_path: Caminho do arquivo local
            log_group_id: ID do grupo onde armazenar a m√≠dia
            bot_id: ID do bot (para identifica√ß√£o)
            media_type: Tipo da m√≠dia (photo, audio, video)
            
        Returns:
            file_id do Telegram ou None se falhar
        """
        try:
            if not log_group_id:
                logger.error("‚ùå ID do grupo de logs n√£o configurado")
                return None
            
            # Verifica se o arquivo existe
            if not os.path.exists(file_path):
                logger.error(f"‚ùå Arquivo n√£o encontrado: {file_path}")
                return None
            
            # Mensagem identificadora
            caption = f"üìÅ Bot ID: {bot_id} | M√≠dia: {media_type} | Upload: {datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S')}"
            
            logger.info(f"üì§ Enviando {media_type} para grupo {log_group_id}")
            
            with open(file_path, 'rb') as media_file:
                if media_type == "photo":
                    message = await self.bot.send_photo(
                        chat_id=log_group_id,
                        photo=media_file,
                        caption=caption
                    )
                    file_id = message.photo[-1].file_id  # Pega a maior resolu√ß√£o
                    
                elif media_type == "audio":
                    message = await self.bot.send_audio(
                        chat_id=log_group_id,
                        audio=media_file,
                        caption=caption
                    )
                    file_id = message.audio.file_id
                    
                elif media_type == "video":
                    message = await self.bot.send_video(
                        chat_id=log_group_id,
                        video=media_file,
                        caption=caption
                    )
                    file_id = message.video.file_id
                    
                else:
                    logger.error(f"‚ùå Tipo de m√≠dia n√£o suportado: {media_type}")
                    return None
            
            logger.info(f"‚úÖ M√≠dia enviada com sucesso! File ID: {file_id}")
            return file_id
            
        except TelegramError as e:
            logger.error(f"‚ùå Erro do Telegram ao enviar {media_type}: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Erro geral ao enviar {media_type}: {e}")
            return None
    
    async def send_media_by_file_id(self, 
                                  chat_id: str, 
                                  file_id: str, 
                                  media_type: str = "photo",
                                  caption: str = None) -> bool:
        """
        Envia m√≠dia usando file_id do Telegram
        
        Args:
            chat_id: ID do chat de destino
            file_id: File ID da m√≠dia no Telegram
            media_type: Tipo da m√≠dia
            caption: Legenda opcional
            
        Returns:
            True se enviou com sucesso, False caso contr√°rio
        """
        try:
            if media_type == "photo":
                await self.bot.send_photo(
                    chat_id=chat_id,
                    photo=file_id,
                    caption=caption
                )
            elif media_type == "audio":
                await self.bot.send_audio(
                    chat_id=chat_id,
                    audio=file_id,
                    caption=caption
                )
            elif media_type == "video":
                await self.bot.send_video(
                    chat_id=chat_id,
                    video=file_id,
                    caption=caption
                )
            else:
                logger.error(f"‚ùå Tipo de m√≠dia n√£o suportado: {media_type}")
                return False
                
            logger.info(f"‚úÖ M√≠dia {media_type} enviada via file_id")
            return True
            
        except TelegramError as e:
            logger.error(f"‚ùå Erro do Telegram ao enviar m√≠dia via file_id: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro geral ao enviar m√≠dia via file_id: {e}")
            return False
    
    def validate_media_file(self, file, allowed_types: dict = None) -> Dict[str, Any]:
        """
        Valida arquivo de m√≠dia
        
        Args:
            file: Arquivo do upload
            allowed_types: Tipos permitidos
            
        Returns:
            Dict com informa√ß√µes da valida√ß√£o
        """
        if not file or not file.filename:
            return {
                'valid': False,
                'error': 'Nenhum arquivo selecionado'
            }
        
        # Tipos padr√£o permitidos
        if allowed_types is None:
            allowed_types = {
                'photo': ['png', 'jpg', 'jpeg', 'gif'],
                'audio': ['mp3', 'wav', 'ogg', 'm4a'],
                'video': ['mp4', 'avi', 'mkv', 'mov']
            }
        
        # Obt√©m extens√£o
        filename = file.filename.lower()
        extension = filename.rsplit('.', 1)[1] if '.' in filename else ''
        
        # Determina tipo de m√≠dia
        media_type = None
        for type_name, extensions in allowed_types.items():
            if extension in extensions:
                media_type = type_name
                break
        
        if not media_type:
            return {
                'valid': False,
                'error': f'Tipo de arquivo n√£o suportado: .{extension}'
            }
        
        # Verifica tamanho (25MB = 25 * 1024 * 1024 bytes)
        max_size = 25 * 1024 * 1024
        if hasattr(file, 'content_length') and file.content_length > max_size:
            return {
                'valid': False,
                'error': 'Arquivo muito grande. M√°ximo: 25MB'
            }
        
        return {
            'valid': True,
            'media_type': media_type,
            'extension': extension,
            'filename': filename
        }
    
    def create_temp_file(self, file, prefix: str = "media_") -> str:
        """
        Cria arquivo tempor√°rio para upload
        
        Args:
            file: Arquivo do upload
            prefix: Prefixo do arquivo tempor√°rio
            
        Returns:
            Caminho do arquivo tempor√°rio
        """
        # Cria arquivo tempor√°rio
        temp_fd, temp_path = tempfile.mkstemp(
            suffix=f".{file.filename.rsplit('.', 1)[1]}" if '.' in file.filename else '',
            prefix=prefix
        )
        
        try:
            # Salva o arquivo
            with os.fdopen(temp_fd, 'wb') as temp_file:
                file.save(temp_file)
            return temp_path
        except Exception as e:
            # Remove arquivo em caso de erro
            os.close(temp_fd)
            if os.path.exists(temp_path):
                os.unlink(temp_path)
            raise e
    
    def cleanup_temp_file(self, temp_path: str):
        """Remove arquivo tempor√°rio"""
        try:
            if os.path.exists(temp_path):
                os.unlink(temp_path)
                logger.info(f"üóëÔ∏è  Arquivo tempor√°rio removido: {temp_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Erro ao remover arquivo tempor√°rio {temp_path}: {e}")

# Fun√ß√£o auxiliar para uso em rotas s√≠ncronas
def run_async_media_upload(bot_token: str, file_path: str, log_group_id: str, bot_id: int, media_type: str) -> Optional[str]:
    """Wrapper s√≠ncrono para upload de m√≠dia"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        service = TelegramMediaService(bot_token)
        return loop.run_until_complete(
            service.upload_media_to_telegram(file_path, log_group_id, bot_id, media_type)
        )
    except Exception as e:
        logger.error(f"‚ùå Erro no upload s√≠ncrono: {e}")
        return None
    finally:
        loop.close()